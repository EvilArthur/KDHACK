Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nfrom func.take_base import take_base_clubs\r\nfrom func.sorting import sorting\r\nfrom func.take_info_clubs import take_info_clubs\r\nfrom func.mail import mail_out\r\nfrom func.geoloc import distance_calc\r\nfrom settings import TOKEN\r\nfrom func.keyboards import take_keyboard, Callback_data\r\nimport pymysql\r\nfrom validate_email import validate_email\r\n\r\n# запуск бота\r\nconnection = pymysql.connect(\r\n    host=\"localhost\",\r\n    user=\"root\",\r\n    password=\"1111\",\r\n    database=\"botDB\"\r\n)\r\nincorrect_input_text = \"Упс, кажется ты ввел(а) что-то не так. Попробуй ещё раз\"\r\nalready_registered_text = \", ты уже зарегистрирован(а) на Госуслугах Дети\"\r\nbot = telebot.TeleBot(TOKEN)\r\n\r\n# проверка\r\ndef checkName(name):\r\n    if len(name.split(' ')) == 3 and len(name.split(\" \")[0]) > 1 and len(name.split(\" \")[1]) > 1 and len(name.split(\" \")[2]) > 1:\r\n        return True\r\n    return False\r\n\r\n\r\ndef checkDate(date):\r\n    data = date.split(\".\")\r\n    if len(data) != 3:\r\n        return False\r\n    if data[0].isdigit() and data[1].isdigit() and data[2].isdigit() and int(data[0]) in range(1, 32) and data[1] in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"] and \\\r\n            int(data[2]) in range(2004, 2019):\r\n        return True\r\n\r\n'''\r\ndef delete_message(message_id, chat_id):\r\n    return delete_message(chat_id, message_id)\r\n'''\r\n\r\n\r\n\r\n# обработка callback от кнопок\r\n@bot.callback_query_handler(func=lambda call: True)\r\ndef callback(call):\r\n    if call.data == Callback_data[0]:\r\n        handle_show(call.message, filtering(1)) # фильтр спорт\r\n    elif call.data == Callback_data[1]:\r\n        handle_show(call.message, filtering(2)) # фильтр программирование\r\n    elif call.data == Callback_data[2]:\r\n        handle_show(call.message, filtering(3)) # фильтр рисование\r\n    elif call.data == Callback_data[3]:\r\n        handle_show(call.message, filtering(4)) # фильтр шахматы\r\n    elif call.data == Callback_data[4]:\r\n        handle_show(call.message, filtering(5)) # фильтр музыка\r\n    elif call.data == Callback_data[6]: # вывести все кружки\r\n        with connection.cursor() as cur:\r\n            cur.execute('select * from clubs')\r\n            dt = cur.fetchall()\r\n        handle_show(call.message, dt)\r\n    elif call.data == Callback_data[7]: # фильтрация запуск\r\n        handle_filter(call.message)\r\n    elif call.data == Callback_data[8]: # вывод кружков\r\n        handle_show(call.message, sorting(1))\r\n    elif call.data == Callback_data[9]: # сортированный вывод кружков\r\n        with connection.cursor() as cur:\r\n            cur.execute('select * from users where tId = {}'.format(str(call.message.chat.id)))\r\n            dt = cur.fetchall()\r\n        handle_show(call.message, sorting([dt[0][11], dt[0][12]]))\r\n    elif call.data == Callback_data[10]: # фильтр типов\r\n        handle_filter_types(call.message)\r\n    elif call.data == Callback_data[13]: # отправить сообщение родителям\r\n        handle_sent_mail(call.message)\r\n    elif call.data == Callback_data[14]: # назад в меню\r\n        with connection.cursor() as cur:\r\n            cur.execute(f'update users set parent_phone = null where tID = ({call.message.chat.id})')\r\n            connection.commit()\r\n        handle_menu(call.message)\r\n    elif call.data == Callback_data[15]: # показать профиль\r\n        handle_show_profile(call.message)\r\n    elif call.data == Callback_data[16]: # редактировать профиль\r\n        handle_edit_profile(call.message)\r\n    elif call.data == Callback_data[17]: # фильтр по увлечениям\r\n        handle_show(call.message, sorting(call.message.chat.id))\r\n\r\n\r\n# функции\r\n@bot.message_handler(commands=['menu'])\r\n\r\ndef handle_menu(message):\r\n    tID = message.chat.id\r\n    with connection.cursor() as cur:\r\n        cur.execute('select kid_firstname, kid_lastname from users where tID = {}'.format(message.chat.id))\r\n        name = cur.fetchall()\r\n    if name:\r\n        bot.send_message(message.chat.id, text=('Чем займёмся на этот раз, ' + str(name[0][1]) + '?'), reply_markup=take_keyboard('0'))\r\n    else:\r\n        bot.send_message(tID, \"Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start\")\r\n\r\n\r\n# вывод мероприятий\r\n@bot.message_handler(commands=['info'])\r\ndef handle_info(message, num):\r\n    data = take_info_clubs(message.chat.id, int(num))\r\n    info = data[0]\r\n    bot.send_location(message.chat.id, data[1][1], data[1][0])\r\n    bot.send_message(message.chat.id, info, reply_markup=take_keyboard('o1'))\r\n\r\n\r\ndef handle_show(message, data):\r\n    bot.send_message(message.chat.id, text=take_base_clubs(data))\r\n    bot.send_message(message.chat.id, text='Напиши номер кружка, чтобы получить подробную информацию и записаться')\r\n\r\n\r\n# запись\r\n@bot.message_handler(commands=['sent_mail'])\r\ndef handle_sent_mail(message):\r\n    with connection.cursor() as cur:\r\n        cur.execute('select parent_email, parent_lastname, parent_patronymic, kid_lastname, kid_firstname, parent_phone, '\r\n                    'posX, posY from users where tID = {}'.format(message.chat.id))\r\n        mail_data = cur.fetchall()\r\n    with connection.cursor() as cur:\r\n        cur.execute('select * from clubs')\r\n        data = cur.fetchall()\r\n    try:\r\n        data = data[int(mail_data[0][5]) - 1]\r\n        bot.send_message(message.chat.id, text='Информация о выбранном тобой кружке отправлена родителю. Удачи на занятиях!')\r\n        mail_out(mail_data[0][0], mail_data[0][1], mail_data[0][2], mail_data[0][4], mail_data[0][3], data[0],\r\n                data[1], distance_calc(mail_data[0][6], mail_data[0][7], data[2], data[3]))\r\n        handle_menu(message)\r\n    except Exception:\r\n        print('Не удалось')\r\n\r\n# фильтрация\r\n@bot.message_handler(commands=['filter_types'])\r\ndef handle_filter_types(message):\r\n    bot.send_message(message.chat.id, text='Выберите направление кружка', reply_markup=take_keyboard('f1'))\r\n\r\n\r\n@bot.message_handler(commands=['filter'])\r\ndef handle_filter(message):\r\n    with connection.cursor() as cur:\r\n        cur.execute(f'select categories from users where tId = \"{message.chat.id}\"')\r\n        data = cur.fetchall()\r\n    print(data[0][0])\r\n    if data[0][0] != None:\r\n        bot.send_message(message.chat.id, 'Доступные фильтры', reply_markup=take_keyboard('f2'))\r\n    else:\r\n        bot.send_message(message.chat.id, 'Доступные фильтры', reply_markup=take_keyboard('f3'))\r\n\r\n\r\ndef sorting(tag):\r\n    with connection.cursor() as cur:\r\n        cur.execute('select * from clubs')\r\n        data = list(cur.fetchall())\r\n    if tag == 1:\r\n        data = sorted(data, key=lambda x: x[tag])\r\n    elif type(tag) == int:\r\n        with connection.cursor() as cur:\r\n            cur.execute(f'select * from users where tID = {tag}')\r\n            db_info = cur.fetchall()\r\n        try:\r\n            intrests = list(db_info[0][13])\r\n        except Exception:\r\n            pass\r\n        for i in range(len(data)):\r\n            if data[i][5] not in intrests:\r\n                t = data[i]\r\n                del data[i]\r\n                data.append(t)\r\n    else:\r\n        data = sorted(data, key=lambda x: distance_calc(x[2], x[3], tag[0], tag[1]))\r\n    return data\r\n\r\n\r\ndef filtering(num):\r\n    with connection.cursor() as cur:\r\n        cur.execute(f'select * from clubs where category = {str(num)}')\r\n        data = cur.fetchall()\r\n    return data\r\n\r\n\r\n# регистрация и тест\r\n@bot.message_handler(commands=['start'])\r\ndef handle_start(message):\r\n    tID = message.chat.id\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select kid_firstname, kid_lastname from users where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        data = cursor.fetchall()\r\n    if not data:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"insert into users (tID) VALUES (\\\"\" + str(tID) + \"\\\")\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Привет! Добро пожаловать в Госуслуги Дети! \"\r\n                              \"Здесь ты сможешь найти кружок или секцию по своим предпочтениям\")\r\n        bot.send_message(\r\n            tID, \"Чтобы я помог тебе, мне нужно узнать немного инфрормации о тебе\")\r\n        msg = bot.send_message(\r\n            tID, \"Напиши свою фамилию, имя и отчество через пробел\")\r\n        bot.register_next_step_handler(msg, input_name)\r\n    else:\r\n        bot.send_message(tID, str(data[0][1]) + \", ты уже зарегистрирован(а) на Госуслугах Дети. Перейди в меню!\",\r\n                         reply_markup=take_keyboard('m1'))\r\n\r\n\r\ndef input_name(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if not checkName(data):\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, input_name)\r\n    else:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set kid_firstname = \\\"\" +\r\n                           data.split(\" \")[0] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set kid_lastname = \\\"\" +\r\n                           data.split(\" \")[1] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set kid_patronymic = \\\"\" +\r\n                           data.split(\" \")[2] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n\r\n        bot.send_message(\r\n            tID, \"Приятно познакомиться, \" + data.split(\" \")[1])\r\n        msg = bot.send_message(\r\n            tID, \"Отправь мне свою дату рождения в формате ДД.ММ.ГГГГ\")\r\n        bot.register_next_step_handler(msg, input_date_birth)\r\n\r\n\r\ndef input_date_birth(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if checkDate(data):\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set birth_date = \\\"\" +\r\n                           data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Записал дату рождения\")\r\n        msg = bot.send_message(\r\n            tID, \"Если у тебя есть сертификат ПФДО, отправь мне его номер. Если нет, отправь 0\")\r\n        bot.register_next_step_handler(msg, input_pfdo)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, input_date_birth)\r\n\r\n\r\ndef input_pfdo(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if data == \"0\":\r\n        bot.send_message(tID, \"Понял, ставлю прочерк\")\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set cert_number = \\\"\" +\r\n                           \"0\" + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        msg = bot.send_message(\r\n            tID, \"Теперь введи фамилию, имя и отчество одного из родителей\")\r\n        bot.register_next_step_handler(msg, input_parent_name)\r\n    elif data.isdigit():\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set cert_number = \\\"\" +\r\n                           data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(\r\n            tID, \"Хорошо, что у тебя есть сертификат ПФДО, он позволит обучаться в большем количестве секций\")\r\n        msg = bot.send_message(\r\n            tID, \"Напиши фамилию, имя и отчество одного из родителей через пробел\")\r\n        bot.register_next_step_handler(msg, input_parent_name)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, input_pfdo)\r\n\r\n\r\ndef input_parent_name(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if not checkName(data):\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, input_parent_name)\r\n    else:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set parent_firstname = \\\"\" +\r\n                           data.split(\" \")[0] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set parent_lastname = \\\"\" +\r\n                           data.split(\" \")[1] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set parent_patronymic = \\\"\" +\r\n                           data.split(\" \")[2] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        msg = bot.send_message(\r\n            tID, \"Отправь рабочую электронную почту родителя\")\r\n        bot.register_next_step_handler(msg, input_email)\r\n\r\n\r\ndef input_email(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if validate_email(data, check_mx=True):\r\n        with connection.cursor() as cursor:\r\n                cursor.execute(\"update users set parent_email = \\\"\" +\r\n                               data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n                connection.commit()\r\n        msg = bot.send_message(\r\n            tID, \"Отправь мне местоположение своего дома, чтобы найти кружки поблизости\")\r\n        bot.register_next_step_handler(msg, get_location)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, input_email)\r\n\r\n@bot.message_handler(content_types=[\"location\"])\r\ndef get_location(message):\r\n    # ДОБАВИТЬ В БАЗУ ДАННЫХ\r\n    tID = message.chat.id\r\n    data= str(message.location)\r\n    posX = data[14:23]\r\n    posY = data[37:45]\r\n    posX, posY = posX.strip(\",\"), posY.strip(\",\")\r\n    with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set posX = \\\"\" +\r\n                           str(posX) + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set posY = \\\"\" +\r\n                           str(posY) + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n    bot.send_message(tID, \"Уже подбираю тебе кружки около твоего дома...\")\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select kid_firstname, kid_lastname from users where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        data = cursor.fetchall()\r\n    bot.send_message(\r\n        tID, \"Ура! \" + str(data[0][1]) + \", у тебя получилось зарегистрироваться!\\nЧтобы начать искать кружки, мне нужно узнать, чем ты увлекаешься\\nНапиши /quiz\")\r\n\r\n@bot.message_handler(commands=['quiz'])\r\ndef start_quiz(message):\r\n    tID = message.chat.id\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select kid_firstname, kid_lastname, categories from users where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        data = cursor.fetchall()\r\n    try:\r\n        if not data[0][2]:\r\n            bot.send_message(tID, \"Давай узнаем о твоих увлечениях. Отвечай \\\"да\\\" или \\\"нет\\\"\")\r\n            msg = bot.send_message(tID, \"Любишь заниматься спортом?\")\r\n            bot.register_next_step_handler(msg, pick_sport)\r\n        elif data[0][2]:\r\n            bot.send_message(tID, data[0][1] + \", ты уже ответил(а) на вопросы, напиши /menu\")\r\n    except Exception:\r\n        bot.send_message(tID, \"Ты ещё не зарегистрирован в ГосУслугах Дети, напиши /start\")\r\n\r\ndef pick_sport(message):\r\n    tID = message.chat.id\r\n    answer = message.text\r\n    if answer.lower() == \"да\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = \\\"\" +\r\n                           \"1\" + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n            msg = bot.send_message(tID, \"Как насчёт технологий IT?\")\r\n            bot.register_next_step_handler(msg, pick_it)\r\n    elif answer.lower() == \"нет\":\r\n        msg = bot.send_message(tID, \"Как насчёт технологий IT?\")\r\n        bot.register_next_step_handler(msg, pick_it)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, pick_sport)\r\n\r\ndef pick_it(message):\r\n    tID = message.chat.id\r\n    answer = message.text\r\n    if answer.lower() == \"да\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = CONCAT(categories, \\\"\" +\r\n                           \"2\" + \"\\\") where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        msg = bot.send_message(tID, \"Увлекаешься рисованием?\")\r\n        bot.register_next_step_handler(msg, pick_painting)\r\n    elif answer.lower() == \"нет\":\r\n        msg = bot.send_message(tID, \"Увлекаешься рисованием?\")\r\n        bot.register_next_step_handler(msg, pick_painting)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, pick_it)\r\n\r\n\r\ndef pick_painting(message):\r\n    tID = message.chat.id\r\n    answer = message.text\r\n    if answer.lower() == \"да\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = CONCAT(categories,\\\"\" +\r\n                           \"3\" + \"\\\") where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        msg = bot.send_message(tID, \"Увлекаешься шахматами?\")\r\n        bot.register_next_step_handler(msg, pick_chess)\r\n    elif answer.lower() == \"нет\":\r\n        msg = bot.send_message(tID, \"Увлекаешься шахматами?\")\r\n        bot.register_next_step_handler(msg, pick_chess)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, pick_painting)\r\n\r\ndef pick_chess(message):\r\n    tID = message.chat.id\r\n    answer = message.text\r\n    if answer.lower() == \"да\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = CONCAT(categories,\\\"\" +\r\n                           \"4\" + \"\\\") where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        msg = bot.send_message(tID, \"Может любишь поиграть на музыкальных инструментах?\")\r\n        bot.register_next_step_handler(msg, pick_music)\r\n    elif answer.lower() == \"нет\":\r\n        msg = bot.send_message(tID, \"Может любишь поиграть на музыкальных инструментах?\")\r\n        bot.register_next_step_handler(msg, pick_music)\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, pick_chess)\r\n\r\ndef pick_music(message):\r\n    tID = message.chat.id\r\n    answer = message.text\r\n    if answer.lower() == \"да\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = CONCAT(categories,\\\"\" +\r\n                           \"4\" + \"\\\") where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        connection.commit()\r\n        msg = bot.send_message(tID, \"Отлично, я запомнил все твои увлечения! Начинай выбирать, просто напиши /menu\")\r\n    elif answer.lower() == \"нет\":\r\n        msg = bot.send_message(tID, \"Отлично, я запомнил все твои увлечения! Начинай выбирать, просто напиши /menu\")\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, pick_music)\r\n\r\n\r\n# профиль\r\n@bot.message_handler(commands=['showprofile'])\r\ndef handle_show_profile(message):\r\n    tID = message.chat.id\r\n\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select * from users where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        data = cursor.fetchall()\r\n        if data:\r\n            bot.send_message(tID, \"Информация из профиля:\")\r\n            dict = {\"1\": \", Спорт\", \"2\": \", Технологии IT\", \"3\": \", Рисование\", \"4\": \", Шахматы\", \"5\": \", Музыка\"}\r\n            cat = \"\"\r\n            try:\r\n                for a in data[0][13]:\r\n                    cat = cat + dict[a]\r\n            except Exception:\r\n                pass\r\n            info_pro = \"Твоё ФИО: \" + str(data[0][0]) + \" \" + str(data[0][1]) + \" \" + data[0][2] + \"\\n\" + \\\r\n            \"Твоя дата рождения: \" + data[0][10] + \"\\n\" + \\\r\n            \"Номер сертификата ПФДО: \" + data[0][9] + \"\\n\" + \\\r\n            \"ФИО Родителя: \" + str(data[0][3]) + \" \" + str(data[0][4]) + \" \" + data[0][5] + \"\\n\" + \\\r\n            \"Электронная почта: \" + data[0][8] + \"\\n\" + \\\r\n            \"Твои интересы: \" + cat[2:] + \\\r\n            \"\\nДля редактирования напиши /editprofile\"\r\n            bot.send_message(message.chat.id, text=info_pro)\r\n        else:\r\n            bot.send_message(tID, \"Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start\")\r\n\r\n@bot.message_handler(commands=['editprofile'])\r\ndef handle_edit_profile(message):\r\n    tID = message.chat.id\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"select * from users where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        data = cursor.fetchall()\r\n    if data:\r\n        bot.send_message(tID, \"Данные из профиля:\")\r\n        dict = {\"1\":\", Спорт\", \"2\":\", Технологии IT\",\"3\":\", Рисование\",\"4\":\", Шахматы\",\"5\":\", Музыка\"}\r\n        cat = \"\"\r\n        try:\r\n            for a in data[0][13]:\r\n                cat = cat + dict[a]\r\n        except Exception:\r\n            pass\r\n        info = \"1. Твоё ФИО: \" + str(data[0][0]) + \" \" + str(data[0][1]) + \" \" + data[0][2] + \"\\n\" + \\\r\n            \"2. Твоя дата рождения: \" + data[0][10] + \"\\n\" + \\\r\n            \"3. Номер сертификата ПФДО: \" + data[0][9] + \"\\n\" + \\\r\n            \"4. ФИО Родителя: \" + str(data[0][3]) + \" \" + str(data[0][4]) + \" \" + data[0][5] + \"\\n\" + \\\r\n            \"5. Электронная почта: \" + data[0][8] + \"\\n\" + \\\r\n            \"6. Твои интересы: \" + cat[2:] + '\\n' + \\\r\n            '7. Моё местоположение'\r\n        bot.send_message(tID, info)\r\n        msg = bot.send_message(tID, \"Выбери номер строки, которую хочешь изменить\")\r\n        bot.register_next_step_handler(msg, pick_line)\r\n    else:\r\n        bot.send_message(tID, \"Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start\")\r\n\r\n\r\ndef pick_line(message):\r\n    tID = message.chat.id\r\n    num = message.text\r\n    if num.isdigit() and len(num) == 1 and int(num) in range(1,8):\r\n        num = int(num)\r\n        if num == 1:\r\n            msg = bot.send_message(tID, \"Введи свою фамилию, имя и отчество через пробел\")\r\n            bot.register_next_step_handler(msg, commit_kid_name)\r\n        elif num == 2:\r\n            msg = bot.send_message(tID, \"Введи свою дату рождения в формате ДД.ММ.ГГГГ\")\r\n            bot.register_next_step_handler(msg, commit_birth_date)\r\n        elif num == 3:\r\n            msg = bot.send_message(tID, \"Введи номер сертификата ПФДО, если его нет, введи 0\")\r\n            bot.register_next_step_handler(msg, commit_pfdo_num)\r\n\r\n        elif num == 4:\r\n            msg = bot.send_message(tID, \"Введи фамилию, имя и отчество родителя через пробел\")\r\n            bot.register_next_step_handler(msg, commit_parent_name)\r\n\r\n        elif num == 5:\r\n            msg = bot.send_message(tID, \"Введи действующую электронную почту родителя\")\r\n            bot.register_next_step_handler(msg, commit_parent_email)\r\n\r\n        elif num == 6:\r\n            msg = bot.send_message(tID, \"Введи цифры направлений, которые тебе интересны, например, 124\\n1. Спорт\\n2. Технологии IT\\n3. Рисование\\n4. Шахматы\\n5. Музыка\")\r\n            bot.register_next_step_handler(msg, commit_categories)\r\n\r\n        elif num == 7:\r\n            msg = bot.send_message(tID, \"Отправь своё новое местоположение\")\r\n            bot.register_next_step_handler(msg, commit_location)\r\n        else:\r\n            msg = bot.send_message(tID, incorrect_input_text)\r\n            bot.register_next_step_handler(msg, pick_line)\r\n\r\n\r\ndef commit_kid_name(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if not checkName(data):\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_kid_name)\r\n    else:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set kid_firstname = \\\"\" +\r\n                           data.split(\" \")[0] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set kid_lastname = \\\"\" +\r\n                           data.split(\" \")[1] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set kid_patronymic = \\\"\" +\r\n                           data.split(\" \")[2] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n\r\n        bot.send_message(\r\n            tID, \"Твоё ФИО успешно обновлено\")\r\n    handle_menu(message)\r\n\r\n\r\ndef commit_birth_date(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if checkDate(data):\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set birth_date = \\\"\" +\r\n                           data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Твоя дата рождения обновлена\")\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_birth_date)\r\n    handle_menu(message)\r\n\r\n\r\ndef commit_pfdo_num(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if data == \"0\":\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set cert_number = \\\"\" +\r\n                           \"0\" + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Твой номер сертификата ПФДО обновлён\")\r\n    elif data.isdigit():\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set cert_number = \\\"\" +\r\n                           data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Твой номер сертификата ПФДО обновлён\")\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_pfdo_num)\r\n    handle_menu(message)\r\n\r\n\r\ndef commit_parent_name(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if not checkName(data):\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_parent_name)\r\n    else:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set parent_firstname = \\\"\" +\r\n                           data.split(\" \")[0] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set parent_lastname = \\\"\" +\r\n                           data.split(\" \")[1] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            cursor.execute(\"update users set parent_patronymic = \\\"\" +\r\n                           data.split(\" \")[2] + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"ФИО твоего родителя обновлено\")\r\n\r\n\r\ndef commit_parent_email (message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if validate_email(data, check_mx=True):\r\n        with connection.cursor() as cursor:\r\n                cursor.execute(\"update users set parent_email = \\\"\" +\r\n                               data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n                connection.commit()\r\n        bot.send_message(tID, \"Электронная почта твоего родителя обновлена\")\r\n    else:\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_parent_email)\r\n    # ПРОВЕРКА ПОЧТЫ\r\n    handle_menu(message)\r\n\r\n\r\ndef commit_categories(message):\r\n    tID = message.chat.id\r\n    data = message.text\r\n    if not data.isdigit():\r\n        msg = bot.send_message(tID, incorrect_input_text)\r\n        bot.register_next_step_handler(msg, commit_categories)\r\n    else:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"update users set categories = \\\"\" +\r\n                            data + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n            connection.commit()\r\n        bot.send_message(tID, \"Твой список интересов обновлён\")\r\n        handle_menu(message)\r\n@bot.message_handler(content_types=['location'])\r\ndef commit_location(message):\r\n    tID = message.chat.id\r\n    data = str(message.location)\r\n    posX = data[14:23]\r\n    posY = data[37:45]\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"update users set posX = \\\"\" +\r\n                       str(posX) + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        cursor.execute(\"update users set posY = \\\"\" +\r\n                       str(posY) + \"\\\" where tID = \\\"\" + str(tID) + \"\\\"\")\r\n        connection.commit()\r\n    bot.send_message(tID, \"Твоё местоположение обновлено\")\r\n\r\n\r\n# контроль ввода\r\n@bot.message_handler(func=lambda text:True)\r\ndef text_check(message):\r\n    with connection.cursor() as cur:\r\n        cur.execute('select * from clubs')\r\n        db = cur.fetchall()\r\n    try:\r\n        if 0 < int(message.text) <= len(db):\r\n            handle_info(message, int(message.text))\r\n    except Exception as e:\r\n        print(e)\r\n\r\n\r\nbot.polling()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 8d99d49199e72bf1106061817c84aa203edd9f52)
+++ b/main.py	(date 1633170666296)
@@ -17,7 +17,7 @@
     database="botDB"
 )
 incorrect_input_text = "Упс, кажется ты ввел(а) что-то не так. Попробуй ещё раз"
-already_registered_text = ", ты уже зарегистрирован(а) на Госуслугах Дети"
+already_registered_text = ", ты уже зарегистрирован(а) на Госуслугах Дети✅"
 bot = telebot.TeleBot(TOKEN)
 
 # проверка
@@ -97,7 +97,7 @@
     if name:
         bot.send_message(message.chat.id, text=('Чем займёмся на этот раз, ' + str(name[0][1]) + '?'), reply_markup=take_keyboard('0'))
     else:
-        bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start")
+        bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети😔\nНапиши /start")
 
 
 # вывод мероприятий
@@ -130,8 +130,8 @@
         mail_out(mail_data[0][0], mail_data[0][1], mail_data[0][2], mail_data[0][4], mail_data[0][3], data[0],
                 data[1], distance_calc(mail_data[0][6], mail_data[0][7], data[2], data[3]))
         handle_menu(message)
-    except Exception:
-        print('Не удалось')
+    except Exception as e:
+        print(e)
 
 # фильтрация
 @bot.message_handler(commands=['filter_types'])
@@ -144,7 +144,7 @@
     with connection.cursor() as cur:
         cur.execute(f'select categories from users where tId = "{message.chat.id}"')
         data = cur.fetchall()
-    print(data[0][0])
+    #print(data[0][0])
     if data[0][0] != None:
         bot.send_message(message.chat.id, 'Доступные фильтры', reply_markup=take_keyboard('f2'))
     else:
@@ -193,15 +193,15 @@
         with connection.cursor() as cursor:
             cursor.execute("insert into users (tID) VALUES (\"" + str(tID) + "\")")
             connection.commit()
-        bot.send_message(tID, "Привет! Добро пожаловать в Госуслуги Дети! "
-                              "Здесь ты сможешь найти кружок или секцию по своим предпочтениям")
+        bot.send_message(tID, "Привет👋\nДобро пожаловать в Госуслуги Дети! "
+                              "Здесь ты сможешь найти кружок или секцию по своим предпочтениям🙋")
         bot.send_message(
             tID, "Чтобы я помог тебе, мне нужно узнать немного инфрормации о тебе")
         msg = bot.send_message(
             tID, "Напиши свою фамилию, имя и отчество через пробел")
         bot.register_next_step_handler(msg, input_name)
     else:
-        bot.send_message(tID, str(data[0][1]) + ", ты уже зарегистрирован(а) на Госуслугах Дети. Перейди в меню!",
+        bot.send_message(tID, str(data[0][1]) + ", ты уже зарегистрирован(а) на Госуслугах Дети✅\n",
                          reply_markup=take_keyboard('m1'))
 
 
@@ -222,7 +222,7 @@
             connection.commit()
 
         bot.send_message(
-            tID, "Приятно познакомиться, " + data.split(" ")[1])
+            tID, "Приятно познакомиться, " + data.split(" ")[1] +"🙈")
         msg = bot.send_message(
             tID, "Отправь мне свою дату рождения в формате ДД.ММ.ГГГГ")
         bot.register_next_step_handler(msg, input_date_birth)
@@ -236,9 +236,8 @@
             cursor.execute("update users set birth_date = \"" +
                            data + "\" where tID = \"" + str(tID) + "\"")
             connection.commit()
-        bot.send_message(tID, "Записал дату рождения")
         msg = bot.send_message(
-            tID, "Если у тебя есть сертификат ПФДО, отправь мне его номер. Если нет, отправь 0")
+            tID, "Если у тебя есть сертификат ПФДО, отправь мне его номер\nЕсли его нет, отправь 0")
         bot.register_next_step_handler(msg, input_pfdo)
     else:
         msg = bot.send_message(tID, incorrect_input_text)
@@ -249,7 +248,7 @@
     tID = message.chat.id
     data = message.text
     if data == "0":
-        bot.send_message(tID, "Понял, ставлю прочерк")
+        bot.send_message(tID, "Если захочешь оформить сертификат, переходи по https://pfdo.ru/\nТам тебя ждёт вся информация")
         with connection.cursor() as cursor:
             cursor.execute("update users set cert_number = \"" +
                            "0" + "\" where tID = \"" + str(tID) + "\"")
@@ -320,13 +319,15 @@
                            str(posX) + "\" where tID = \"" + str(tID) + "\"")
             cursor.execute("update users set posY = \"" +
                            str(posY) + "\" where tID = \"" + str(tID) + "\"")
+            cursor.execute("update users set parent_phone = \"" +
+                           str(0) + "\" where tID = \"" + str(tID) + "\"")
             connection.commit()
     bot.send_message(tID, "Уже подбираю тебе кружки около твоего дома...")
     with connection.cursor() as cursor:
         cursor.execute("select kid_firstname, kid_lastname from users where tID = \"" + str(tID) + "\"")
         data = cursor.fetchall()
     bot.send_message(
-        tID, "Ура! " + str(data[0][1]) + ", у тебя получилось зарегистрироваться!\nЧтобы начать искать кружки, мне нужно узнать, чем ты увлекаешься\nНапиши /quiz")
+        tID, "Ура! " + str(data[0][1]) + ", у тебя получилось зарегистрироваться🎉\nЧтобы начать искать кружки, мне нужно узнать, чем ты увлекаешься\nНапиши /quiz")
 
 @bot.message_handler(commands=['quiz'])
 def start_quiz(message):
@@ -337,12 +338,12 @@
     try:
         if not data[0][2]:
             bot.send_message(tID, "Давай узнаем о твоих увлечениях. Отвечай \"да\" или \"нет\"")
-            msg = bot.send_message(tID, "Любишь заниматься спортом?")
+            msg = bot.send_message(tID, "🚴Любишь заниматься спортом?")
             bot.register_next_step_handler(msg, pick_sport)
         elif data[0][2]:
             bot.send_message(tID, data[0][1] + ", ты уже ответил(а) на вопросы, напиши /menu")
     except Exception:
-        bot.send_message(tID, "Ты ещё не зарегистрирован в ГосУслугах Дети, напиши /start")
+        bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети😔\nНапиши /start")
 
 def pick_sport(message):
     tID = message.chat.id
@@ -355,6 +356,10 @@
             msg = bot.send_message(tID, "Как насчёт технологий IT?")
             bot.register_next_step_handler(msg, pick_it)
     elif answer.lower() == "нет":
+        with connection.cursor() as cursor:
+            cursor.execute("update users set categories = \"" +
+                           "" + "\" where tID = \"" + str(tID) + "\"")
+            connection.commit()
         msg = bot.send_message(tID, "Как насчёт технологий IT?")
         bot.register_next_step_handler(msg, pick_it)
     else:
@@ -419,7 +424,7 @@
     if answer.lower() == "да":
         with connection.cursor() as cursor:
             cursor.execute("update users set categories = CONCAT(categories,\"" +
-                           "4" + "\") where tID = \"" + str(tID) + "\"")
+                           "5" + "\") where tID = \"" + str(tID) + "\"")
         connection.commit()
         msg = bot.send_message(tID, "Отлично, я запомнил все твои увлечения! Начинай выбирать, просто напиши /menu")
     elif answer.lower() == "нет":
@@ -455,7 +460,7 @@
             "\nДля редактирования напиши /editprofile"
             bot.send_message(message.chat.id, text=info_pro)
         else:
-            bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start")
+            bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети😔\nНапиши /start")
 
 @bot.message_handler(commands=['editprofile'])
 def handle_edit_profile(message):
@@ -483,7 +488,7 @@
         msg = bot.send_message(tID, "Выбери номер строки, которую хочешь изменить")
         bot.register_next_step_handler(msg, pick_line)
     else:
-        bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети, напиши /start")
+        bot.send_message(tID, "Ты ещё не зарегистрирован(а) в Госуслугах Дети😔\nНапиши /start")
 
 
 def pick_line(message):
@@ -649,7 +654,9 @@
     try:
         if 0 < int(message.text) <= len(db):
             handle_info(message, int(message.text))
+            print(message.text, "----")
     except Exception as e:
+        print("Ошибка при отправке цифры кружка")
         print(e)
 
 
Index: func/keyboards.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from telebot import types\r\nCallback_data = ['Sport', 'Programming', 'Drawing', 'Chess', 'Music', 'Apply',\r\n                 'Show_activities', 'Filter', 'Cost', 'Most_close', 'Type',\r\n                 'Yes', 'No', 'Write', 'Back', 'show_profile', 'edit_profile', 'quiz']\r\n\r\n\r\ndef take_keyboard(num):\r\n    if num == 'r1':\r\n        b1 = types.InlineKeyboardButton(text='Да', callback_data=Callback_data[11])\r\n        b2 = types.InlineKeyboardButton(text='Нет', callback_data=Callback_data[12])\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2]])\r\n    elif num == '0':\r\n        b1 = types.InlineKeyboardButton(text='Посмотреть все секции и кружки', callback_data=Callback_data[6])\r\n        b2 = types.InlineKeyboardButton(text='Включить поиск по фильтрам', callback_data=Callback_data[7])\r\n        b3 = types.InlineKeyboardButton(text='Данные профиля', callback_data=Callback_data[15])\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3]])\r\n    elif num == 'f1':\r\n        b1 = types.InlineKeyboardButton(text='Спорт', callback_data=Callback_data[0])\r\n        b2 = types.InlineKeyboardButton(text='Программирование', callback_data=Callback_data[1])\r\n        b3 = types.InlineKeyboardButton(text='Рисование', callback_data=Callback_data[2])\r\n        b4 = types.InlineKeyboardButton(text='Шахматы', callback_data=Callback_data[3])\r\n        b5 = types.InlineKeyboardButton(text='Музыка', callback_data=Callback_data[4])\r\n        b6 = types.InlineKeyboardButton(text='')\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3], [b4], [b5]])\r\n    elif num == 'f2':\r\n        b1 = types.InlineKeyboardButton(text='По стоимости', callback_data=Callback_data[8])\r\n        b2 = types.InlineKeyboardButton(text='По расстоянию', callback_data=Callback_data[9])\r\n        b3 = types.InlineKeyboardButton(text='По интересам', callback_data=Callback_data[10])\r\n        b4 = types.InlineKeyboardButton(text='По твоим увлечениям', callback_data=Callback_data[17])\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3], [b4]])\r\n    elif num == 'o1':\r\n        b1 = types.InlineKeyboardButton(text='Записаться', callback_data=Callback_data[13])\r\n        b2 = types.InlineKeyboardButton(text='Назад', callback_data=Callback_data[14])\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2]])\r\n    elif num == 'r2':\r\n        b1 = types.InlineKeyboardButton(text='Редактирование профиля', callback_data=Callback_data[16])\r\n        b2 = types.InlineKeyboardButton(text='Назад', callback_data=Callback_data[14])\r\n        keyboard = types.InlineKeyboardButton([[b1], [b2]])\r\n    elif num == 'f3':\r\n        b1 = types.InlineKeyboardButton(text='По стоимости', callback_data=Callback_data[8])\r\n        b2 = types.InlineKeyboardButton(text='По расстоянию', callback_data=Callback_data[9])\r\n        b3 = types.InlineKeyboardButton(text='По интересам', callback_data=Callback_data[10])\r\n        keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3]])\r\n    elif num == 'm1':\r\n        b1 = types.InlineKeyboardButton(text='Меню', callback_data=Callback_data[14])\r\n        keyboard = types.InlineKeyboardMarkup([[b1]])\r\n    return keyboard\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/func/keyboards.py b/func/keyboards.py
--- a/func/keyboards.py	(revision 8d99d49199e72bf1106061817c84aa203edd9f52)
+++ b/func/keyboards.py	(date 1633169376433)
@@ -10,31 +10,31 @@
         b2 = types.InlineKeyboardButton(text='Нет', callback_data=Callback_data[12])
         keyboard = types.InlineKeyboardMarkup([[b1], [b2]])
     elif num == '0':
-        b1 = types.InlineKeyboardButton(text='Посмотреть все секции и кружки', callback_data=Callback_data[6])
-        b2 = types.InlineKeyboardButton(text='Включить поиск по фильтрам', callback_data=Callback_data[7])
-        b3 = types.InlineKeyboardButton(text='Данные профиля', callback_data=Callback_data[15])
+        b1 = types.InlineKeyboardButton(text='📃Посмотреть все секции и кружки📃', callback_data=Callback_data[6])
+        b2 = types.InlineKeyboardButton(text='📂Включить поиск по фильтрам📂', callback_data=Callback_data[7])
+        b3 = types.InlineKeyboardButton(text='📝Данные профиля📝', callback_data=Callback_data[15])
         keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3]])
     elif num == 'f1':
-        b1 = types.InlineKeyboardButton(text='Спорт', callback_data=Callback_data[0])
-        b2 = types.InlineKeyboardButton(text='Программирование', callback_data=Callback_data[1])
-        b3 = types.InlineKeyboardButton(text='Рисование', callback_data=Callback_data[2])
-        b4 = types.InlineKeyboardButton(text='Шахматы', callback_data=Callback_data[3])
-        b5 = types.InlineKeyboardButton(text='Музыка', callback_data=Callback_data[4])
+        b1 = types.InlineKeyboardButton(text='Спорт🚴', callback_data=Callback_data[0])
+        b2 = types.InlineKeyboardButton(text='Программирование💻', callback_data=Callback_data[1])
+        b3 = types.InlineKeyboardButton(text='Рисование🌆', callback_data=Callback_data[2])
+        b4 = types.InlineKeyboardButton(text='Шахматы🎲', callback_data=Callback_data[3])
+        b5 = types.InlineKeyboardButton(text='Музыка🎶', callback_data=Callback_data[4])
         b6 = types.InlineKeyboardButton(text='')
         keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3], [b4], [b5]])
     elif num == 'f2':
-        b1 = types.InlineKeyboardButton(text='По стоимости', callback_data=Callback_data[8])
-        b2 = types.InlineKeyboardButton(text='По расстоянию', callback_data=Callback_data[9])
-        b3 = types.InlineKeyboardButton(text='По интересам', callback_data=Callback_data[10])
-        b4 = types.InlineKeyboardButton(text='По твоим увлечениям', callback_data=Callback_data[17])
+        b1 = types.InlineKeyboardButton(text='По стоимости💲', callback_data=Callback_data[8])
+        b2 = types.InlineKeyboardButton(text='По расстоянию🚂', callback_data=Callback_data[9])
+        b3 = types.InlineKeyboardButton(text='По интересам👦', callback_data=Callback_data[10])
+        b4 = types.InlineKeyboardButton(text='По твоим увлечениям📌', callback_data=Callback_data[17])
         keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3], [b4]])
     elif num == 'o1':
-        b1 = types.InlineKeyboardButton(text='Записаться', callback_data=Callback_data[13])
-        b2 = types.InlineKeyboardButton(text='Назад', callback_data=Callback_data[14])
+        b1 = types.InlineKeyboardButton(text='Записаться✅', callback_data=Callback_data[13])
+        b2 = types.InlineKeyboardButton(text='Назад⬅', callback_data=Callback_data[14])
         keyboard = types.InlineKeyboardMarkup([[b1], [b2]])
     elif num == 'r2':
-        b1 = types.InlineKeyboardButton(text='Редактирование профиля', callback_data=Callback_data[16])
-        b2 = types.InlineKeyboardButton(text='Назад', callback_data=Callback_data[14])
+        b1 = types.InlineKeyboardButton(text='Редактирование профиля✏', callback_data=Callback_data[16])
+        b2 = types.InlineKeyboardButton(text='Назад⬅', callback_data=Callback_data[14])
         keyboard = types.InlineKeyboardButton([[b1], [b2]])
     elif num == 'f3':
         b1 = types.InlineKeyboardButton(text='По стоимости', callback_data=Callback_data[8])
@@ -42,6 +42,6 @@
         b3 = types.InlineKeyboardButton(text='По интересам', callback_data=Callback_data[10])
         keyboard = types.InlineKeyboardMarkup([[b1], [b2], [b3]])
     elif num == 'm1':
-        b1 = types.InlineKeyboardButton(text='Меню', callback_data=Callback_data[14])
+        b1 = types.InlineKeyboardButton(text='Меню💬', callback_data=Callback_data[14])
         keyboard = types.InlineKeyboardMarkup([[b1]])
     return keyboard
Index: func/geoloc.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from geopy import distance\r\n\r\n\r\ndef distance_calc(myshirota, mydolgota, clubshirota, clubdolgota):\r\n    mylocation = (myshirota, mydolgota)\r\n    clublocation = (clubshirota, clubdolgota)\r\n    dist = distance.distance(mylocation, clublocation).km\r\n    if dist < 1:\r\n        return dist*1000\r\n    else:\r\n        return round(dist,2)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/func/geoloc.py b/func/geoloc.py
--- a/func/geoloc.py	(revision 8d99d49199e72bf1106061817c84aa203edd9f52)
+++ b/func/geoloc.py	(date 1633164872340)
@@ -5,7 +5,4 @@
     mylocation = (myshirota, mydolgota)
     clublocation = (clubshirota, clubdolgota)
     dist = distance.distance(mylocation, clublocation).km
-    if dist < 1:
-        return dist*1000
-    else:
-        return round(dist,2)
\ No newline at end of file
+    return round(dist,2)
\ No newline at end of file
